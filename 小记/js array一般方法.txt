var list = new Array()是我们在js中常常写到的代码，今天就总结哈Array的对象具有哪些方法。 

list[0] = 0; 

list[1] = 1; 

list[2] = 2; 

或者这样声明：var list = [0,1,2] 

1 shift()t:删除数组的第一个元素,返回删除的值。这里是0 

2 unshift(3,4):把参数加载数组的前面，返回数组的长度。现在list:中是3,4,0,1,2 

3pop():删除数组的最后一个元素，返回删除的值。这里是2. 

4push(3):将参数加载到数组的最后，返回数组的长度，现在List中时：0,1,2,3 

5concat(3,4):把两个数组拼接起来。 

6splice(start,deleteCount,val1,val2,...)：从start位置开始删除deleteCount项，并从该位置起插入val1,val2,... 

reverse：将数组反序 
var a = [1,2,3,4,5]; 
var b = a.reverse(); //a：[5,4,3,2,1] b：[5,4,3,2,1] 

sort(orderfunction)：按指定的参数对数组进行排序 
var a = [1,2,3,4,5]; 
var b = a.sort(); //a：[1,2,3,4,5] b：[1,2,3,4,5] 

slice(start,end)：返回从原数组中指定开始下标到结束下标之间的项组成的新数组 
var a = [1,2,3,4,5]; 
var b = a.slice(2,5); //a：[1,2,3,4,5] b：[3,4,5] 

join(separator)：将数组的元素组起一个字符串，以separator为分隔符，省略的话则用默认用逗号为分隔符 
var a = [1,2,3,4,5]; 
var b = a.join("|"); //a：[1,2,3,4,5] b："1|2|3|4|5"





1.检测数组
1)检测对象是否为数组,使用instanceof 操作符

if(value instanceof Array)
{
//对数组执行某些操作
}
2)获取对象的类型,比较是否为object类型(此方法只能检测是否为Object,不推荐)

if(typeof(value)=="Object")
{
//对数组执行某些操作
}
3)检测对象是否为数组,使用Array.isArray()方法(只支持ie9+,firefox 4+,safari 5+,opera 10.5+和chrome)

if(Array.isArray(value))
{
//对数组执行某些操作
}
2.转换方法
所有对象都具有toLocaleString(),toString()和valueOf()方法.

 

调用数组的toString()方法会返回由数组中每个值的字符串形式拼接而成的一个以逗号分隔的字符串.

调用valueOf()返回的还是数组.

 

join()方法:接收一个参数,即用作分隔符的字符串,然后返回包含所有数组项的字符串

var colors=["red","green","blue"];
alert(colors.join("||"));//red||green||blue
3.栈方法
栈是一种LIFO(Last-In-First-Out,后进先出)的数据结构.

JavaScript为数组专门提供了push()和pop方法()方法,以便实现类似栈的行为

1):push()方法可以接收任意数量的参数，把它们逐个添加到数组末尾,并返回修改后数组的长度

2):pop()方法则从数组末尾移除最后一项,减少数组的length值,然后返回移除的项.

复制代码
var colors=new Array();//创建一个数组
var count=colors.push("red","green");//推入两项
alert(count);//2


count=colors.push("black");//推入另一项
alert(count);//3

var item=colors.pop();//移除最后一项,并返回最后一项的值
alert(item);//“black”
alert(colors.length);//2


以上代码首先我们使用push()将两个字符串推入数组的末尾,并将返回的结果保存在变量count中.然后再推入一个值,而结果任然保存在count中.因为此时数组中包含3项,所以push()返回3.
在调用pop()时,它会返回数组的最后一项,即字符串"black".此后,数组中仅剩两项.
复制代码
4.队列方法
栈数据结构的访问规则是LIFO(Last-In-First-Out,后进先出),而队列数据结构的访问规则是FIFO(First-In-First-Out,先进先出).

队列在列表的末端添加项,从列表的前端移除项.

JavaScript为队列提供了shift()和unshift()方法

1):shift()移除数组中第一个项并返回改项,同时将数组长度减1.

2):unshift()在数组前端添加任意个项并返回新数组的长度.

 

结合push()和pop方法,shift()和unshift()方法 做的一个实例

复制代码
var n=new Array("张三","李四");
            n.push("王五");//添加参数到数组末尾,并修改数组长度
            n.shift();//移除数组第一项,并返回该项
            
            n.unshift("小钱");//添加参数到数组前端
            n.pop();//从数组末尾移除最后一项
            
            //循环显示出数组的值
            for(var i=0;i<n.length;i++)
            {
                console.log(n[i]);
            }
　　　　　　　//小钱 李四 
复制代码
5.重排序方法
数组中已经存在两个可以直接用来重排序的方法:reverse()和sort()

在默认情况下,sort()方法回按升序排列数组项――即最小的值位于最前面,最大的值排在最后面,为了实现排序,sort()方法会调用每个数组项的toString()转型方法,

然后比较得到的字符串,以确定如何排序.即数组中的每一项都是数值,sort()方法比较的也是字符串,如下所示

    var values=[0,1,5,10,15];
            values.sort();//进行排序显示
            alert(values);//0,1,10,15,5
sort()方法根据测试字符串的结果改变原来的顺序.因为数组5虽然小雨10,但在进行字符串比较时,“10”则位于“5"的前面,于是数组的顺序就被修改了.这种排序方式在很多情况下都不是最佳方案,因此sort()方法可以接收一个比较函数作为参数,以便我们制定哪个值位于哪个值的前面.

 

比较函数接收两个参数,如果第一个参数位于第二个之前则返回一个负数,如果两个参数相等则返回0,如何第一个参数位于第二个之后则返回一个正数.以下就是一个简单的比较函数:

复制代码

function compare(value1,value2)
            {
                if(value1<value2)
                {
                    return -1;
                }else if(value1==value2)
                {
                    return 0;
                }else
                {
                    return 1;
                }
            }
            var values=[0,1,5,10,15];
            values.sort(compare);//进行排序显示
            alert(values);//0,1,5,10,15
            
复制代码
将比较函数传递到sort()方法之后,数值仍然保持了正确的升序.当然,也可以通过比较函数产生降序排序的结果,只要交换比较函数的返回值即可.

 

注：value1<value2 返回-1表示正序,返回1表示倒序

当然如果反转数组原来的顺序,使用reverse()方法要更快一些

当然如何对于数值类型或其valuesOf()方法会返回数值类型的对象类型,可以使用一个更简单的比较函数.这个函数只要用第一个值减第二个值即可

function compare(value1,value2)
{
return value1-value2;
}
此方法返回的是正序
6.操作方法
1):concat()方法可以基于当前数组中的所有项创建一个新数组.

在没有给concat()方法传递参数的情况下,它只是复制当前数组并返回副本.如何传递给concat()方法的是一个或多个数组,

则该方法会将这些数组中的每一项逗添加到结果数组中.如果传递的值不是数组,这些值就会被简单地添加到结果数组的末尾.下面看一个列子

var colors=["red","green","blue"];
            var color2=colors.concat("yellow",["black","brown"]);
            alert(color2);//red,green,blue,yellow,black,brown
2):slice()方法基于当前数组中的一或多个项创建一个新数组.

slice()方法可以接收一或两个参数,即要返回的起始和结束位置.

在只有一个参数的情况下,slice()方法返回从该参数指定位置开始到当前数组末尾的所有项.

如何有两个参数,该方法返回起始和结束位置之间的项――但不包括结束位置的项.slice()方法不会影响原始数组,下面看一个列子

var colors=["red","green","blue","yellow","black"];
            colors.split(1);//green,blue,yellow,black
            colors.split(1,4)//green,blue,yellow
 3):splice()方法恐怕要算是最强大的数组方法了,它有很多种用法。

splice()的主要用途是向数组的中部插入项,但使用这种方法的方式则有如下3种

a:删除：可以删除任意数量的项,只需指定2个参数:要删除的第一项的位置和要删除的项数.

列如：splice(0,2)会删除数组中的前两项.

 

b:插入:可以向指定位置插入任意数量的项,只需要提供3个参数:起始位置,0(要删除的项数)和要插入的项.

如何要插入多个项,可以再传入第四,第五,以至任意多个项.

列如:splice(2,0,"red","green")会从当前数组的位置2开始插入字符串"red"和"green"

 

c:替换:可以向指定位置插入任意数量的项,且同时删除任意数量的项,只需要提供3个参数:起始位置,要删除的项数和要插入的任意数量的项.

插入的项数不必和和删除的项数相等.

列如:splice(2,1,"red","green")会删除当前数组位置2的项,然后再从位置2开始插入字符串"red"和"green"

 

注：插入和替换方式相同,不同点就在于第2参数,为0表示插入不删除,大于0表示要删除的数量

splice()方法始终都会返回一个数组,该数组中包含从原始数组中删除的项(如果没有删除任何项,则会返回一个空数组).

 


下面有个列子用了上述3中splice()方法,如下：

复制代码
var colors=["red","green","blue"];
            var removed=colors.splice(0,1);//删除第一项
            alert(colors);//green,blue
            alert(removed);//red,返回的数组中只有一项
            
            removed=colors.splice(1,0,"yellow","orange");//从位置1开始插入2条数据
            alert(colors);//green,blue,yellow,orange
            alert(removed);//返回一个空数组
            
            removed=colors.splice(1,1,"red","purple");//从位置1插入2条数据,并删除位置1的数据
            alert(colors);//green,red,purple,yellow,orange
            alert(removed);//yellow,返回的数组中只包含一项
复制代码
 

7.位置方法
两个位置方法:indexOf()和lastIndexOf(),这两个方法都接收两个参数:要查找的项和(可选的)表示查找七点位置的索引.

1)indexOf()：从数组的开头(位置0)开始向后查找

2)lastIndexOf():从数组的末尾开始向前查找

 

这两个方法都返回查找的项在数组中的位置,或者在没找到的情况下返回-1.

在比较第一个参数与数组中的每一项时,会使用全等操作符,也就是说,要求查找的项必须严格相等

下面写了这2个方法的实例,如下:

复制代码
var numbers=[1,2,3,4,5,4,3,2,1];
            alert(numbers.indexOf(4));//3 返回第一个出现的4位置
            alert(numbers.lastIndexOf(4));//5 返回最后一个出现的4位置
            alert(numbers.indexOf(4,4));//5  从位置4开始查找第一个4出现的位置
            alert(numbers.lastIndexOf(4,4));//3 从位置4开始查找最后一个4出现的位置
            
            
            var person={name:"ToNi"};
            var people=[{name:"ToNi"}];
            var morePeople=[person];
            alert(people.indexOf(person));//返回-1 必须严格相等,不仅仅是值相等
            alert(morePeople.indexOf(person));//返回0
